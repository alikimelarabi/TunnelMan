#ifndef ACTOR_H_
#define ACTOR_H_

#include "GraphObject.h"

#include <iostream>

// Students:  Add code to this file, Actor.cpp, StudentWorld.h, and StudentWorld.cpp

class StudentWorld;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// ACTOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Actor : public GraphObject
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	Actor(StudentWorld* wrld, int IMID, int xpos_start, int ypos_start, Direction dir, float size = 1.0, unsigned int depth = 0, bool penetrates = false);
	virtual ~Actor();

	// PURE VIRTUAL FUNCTIONS
	virtual void doSomething() = 0;
	virtual void annoy(int hit) = 0;
	virtual int getIMID() = 0; 
	
	// OTHER METHODS
	bool isAlive();
	virtual void setDead();
	bool cannotPenetrateThisObj();
	StudentWorld* myW();
	virtual void takeGold();
	virtual bool getIsGoingAwayFromOilField();

private:
	StudentWorld* m_wrld;
	bool m_alive;
	bool cannotPenetrate;
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// EARTH
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Earth : public Actor
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	Earth(StudentWorld* wrld, int xpos, int ypos);
	virtual ~Earth();

	// OTHER METHODS
	virtual void doSomething();
	virtual void annoy(int hit);
	virtual int getIMID();
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// TUNNELMAN
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Tunnelman : public Actor
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	Tunnelman(StudentWorld* wrld);
	virtual ~Tunnelman();

	// OTHER METHODS
	virtual void doSomething();

	virtual void annoy(int hit);
	
	virtual int getIMID();
	void plusGold();
	void giveGold();
	void plusSonarKit();
	void useSonarKit();
	void plusWaterPool();
	void fireSquirt();
	int getSquirts();
	int getSonarKits();
	int getGold();
	int getHP();

private:
	int m_hlth;
	int m_squirts;
	int m_sonar;
	int m_gold;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// BOULDER
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Boulder : public Actor
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	Boulder(StudentWorld* wrld, int xpos, int ypos);
	virtual ~Boulder();

	// OTHER METHODS
	virtual void doSomething();
	virtual void annoy(int hit);
	virtual int getIMID();

private:
	int m_stable; // 0, 1, 2 states (S, W, F)
	int m_ticks;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// OIL
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Oil : public Actor
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	Oil(StudentWorld* wrld, int xpos, int ypos);
	virtual ~Oil();

	// OTHER METHODS
	virtual void doSomething();
	virtual void annoy(int hit);
	virtual int getIMID();
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// GOLD NUGGET
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Gold : public Actor
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	Gold(StudentWorld* wrld, int xpos, int ypos, bool initial_state = true);
	virtual ~Gold();

	// OTHER METHODS
	virtual void doSomething();
	bool canProtestTakeGold();
	virtual void annoy(int hit);
	virtual int getIMID();

private:
	bool m_picked_up; 
	int m_time;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// POWERUPS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class PowerUp : public Actor // ABC for sonar and waterpools
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	PowerUp(StudentWorld* wrld, int IMID, int xpos, int ypos);
	virtual ~PowerUp();

	// PURE VIRTUAL FUNCTIONS
	virtual void doSomething() = 0;
	virtual int getIMID() = 0;

	// OTHER METHODS
	virtual void annoy(int hit);
	void setTickCount(int ticker);
	void decrementTicks();
	int getTickCount();
	
private:
	int m_ticks;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// SONAR KITS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Sonar : public PowerUp
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	Sonar(StudentWorld* wrld);
	virtual ~Sonar();

	// OTHER METHODS
	virtual void doSomething();
	virtual int getIMID();
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// WATERPOOL
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class WaterPool : public PowerUp
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	WaterPool(StudentWorld* wrld, int xpos, int ypos);
	virtual ~WaterPool();

	// OTHER METHODS
	virtual void doSomething();
	virtual int getIMID();
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// SQUIRT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Squirt : public Actor
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	Squirt(StudentWorld* wrld, int xpos, int ypos, Direction dir);
	virtual ~Squirt();

	// OTHER METHODS
	virtual void doSomething();
	virtual void annoy(int hit);
	virtual int getIMID();

private:
	int m_length;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// REGULAR PROTESTOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class RegularProtester : public Actor 
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	RegularProtester(StudentWorld* wrld, int IMID, int hp);
	virtual ~RegularProtester();

	// OTHER METHODS
	virtual void doSomething();

	// these are all the methods to help doSomething work properly
	bool isAtRest();
	bool isCurrentlyStunned();
	bool hasJustShouted();
	bool yell();
	bool moveTowardsTunnelman();
	void takeRegMove();
	void takeMoveToLeave();
	void activateRestTimer();
	virtual void takeGold();
	virtual void annoy(int hit);
	virtual void setDead();
	void setDirAtIntersection(GraphObject::Direction d);
	virtual int getIMID();

	// ACCESSORS AND MUTATORS
	void getStunned();
	void setTicksToWaitBetweenMoves(int time);
	void setStunTime(int time);
	int getHP();
	void takeHit(int hit);
	bool getIsGoingAwayFromOilField();
	void initiateGoingAwayFromOilField();

private:
	bool m_rest;
	int m_rest_cntr;

	bool m_stunned;
	int m_stunned_cntr;

	int m_hlth;
	bool m_leaving;
	int m_num_steps_cur;

	bool m_just_yelled;
	int m_just_yelled_cntr;

	int m_intersection_cntr;

	int m_nextmove_cntr;
	int m_nextstunned_cntr;
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///// HARDCORE PROTESTOR
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class HardcoreProtester : public RegularProtester // a hardcore protester is a regular protester with a few modifications to its behavior
{
public:
	// CONSTRCUTOR AND DESTRUCTOR
	HardcoreProtester(StudentWorld* wrld, int stare, int range);
	virtual ~HardcoreProtester();

	// OTHER METHODS
	virtual void doSomething();
	virtual void takeGold();
	virtual void annoy(int hit);
	bool rangeStep();
	bool staringAtGold();
	int getRange();
	virtual int getIMID();
	
private:
	int m_stare_cntr;
	int m_stare;
	int m_range;
	bool m_is_staring;
};

#endif // ACTOR_H_